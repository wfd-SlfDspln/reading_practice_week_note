资料来源：哔哩哔哩
链接：https://www.bilibili.com/video/BV1TGdrYGENB/?spm_id_from=333.1391.0.0&p=11&vd_source=3ff91e1ac3f7dcbe74300992a6d7daa0
实践流程：在读书时间周期间，我一边观看视频，学习React前端开发框架，一边自己实操，复现视频中的代码，目前已经学习至第11部分，初步取得成果
困难及解决方法：
1.首先遇到的困难是create-react-app的下载，在下载create-react-app之前需要先下载nodejs和npm，并且配置环境变量，在配置nodejs
环境时尝试过多种方法在创建React项目时依然报错，在浏览了多个b站博主的教学视频后才将问题解决，并成功创建了React项目。
2.在理解React某些概念及用法时较为困难，如React的生命周期及其多个函数，需要自己手动操作多次通过在函数中添加console.log来观察其生命周期
心得：
   刚开始接触React的时候，我完全被它独特的思维方式搞懵了。明明是要写界面，却要在JavaScript里混着写类似HTML的JSX，这种写法让我很不适应。
每次写className都会下意识写成class，然后对着报错发呆。但坚持写了几个简单的组件后，我慢慢发现这种把HTML、CSS和JavaScript放在一起的方式，
反而让代码的逻辑更清晰了。最让我头疼的是理解React的状态管理。第一次用useState时，我完全不明白为什么简单的变量赋值不行，非要搞个这么复杂
的hook。直到我写了个计数器组件，点击按钮数字却不更新，才真正体会到React的状态机制有多重要。后来在实现一个简单的待办事项列表时，我终于get
到了状态驱动的魅力 - 数据一变，界面自动更新，再也不用手动操作DOM了。组件化的概念也让我纠结了很久。刚开始我觉得把页面拆成一个个小组件太麻
烦，直到项目稍微复杂点，发现同样的代码在多个地方重复出现，才明白组件复用的价值。现在我已经养成了先思考组件结构再动手的习惯，这确实让代码
更易维护了。这些看似简单的坑，却让我对React的工作原理有了更深的理解。虽然现在我还是会碰到各种问题，但已经不像刚开始那样手足无措了。React
的学习过程就像在解谜，每解决一个难题，就对它的设计理念多一分认同。最重要的是，我学会了用React的思维方式来思考界面开发，这比单纯记住API要
有价值得多。
